<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Golang on 程序员新亮</title>
        <link>http://localhost:1313/categories/golang/</link>
        <description>Recent content in Golang on 程序员新亮</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>程序员新亮</copyright>
        <lastBuildDate>Sun, 14 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/golang/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>《基于 Gin 封装的高效 Web 框架》</title>
        <link>http://localhost:1313/p/golang-gin-api/</link>
        <pubDate>Sun, 14 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/golang-gin-api/</guid>
        <description>&lt;p&gt;缘起：有部分开发者提出了这样的需求：“亮哥，你的开源项目 &lt;a class=&#34;link&#34; href=&#34;https://github.com/xinliangnote/go-gin-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;go-gin-api&lt;/a&gt; 项目非常适合我，但是我只需要 API 接口和 CURD 操作示例，不需要界面和其他集成功能。能否提供一个简化版的框架供我快速上手？”&lt;/p&gt;
&lt;p&gt;针对这个需求，gin-api-mono(框架名称) 应运而生。它是一个 简洁、轻量级 的 API 框架，集成了常用组件 并提供了 CURD 操作示例，方便开发者快速上手。与 &lt;a class=&#34;link&#34; href=&#34;https://github.com/xinliangnote/go-gin-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;go-gin-api&lt;/a&gt; 不同的是，gin-api-mono 去掉了一些集成的功能和界面，使得整个框架更加简洁、轻量化。此外 gin-api-mono 也对代码进行了升级以确保性能和稳定性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单说一下 &lt;a class=&#34;link&#34; href=&#34;https://github.com/xinliangnote/go-gin-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;go-gin-api&lt;/a&gt; 项目，是一个基于 Gin 的 API 框架，它提供了 WEB 界面一键安装的方式，让你可以快速启动一个开箱即用的 Go 项目 (新手入门必备) 。目前，该项目已经获得了 5.4K 的 Star。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第一章了解-gin-框架&#34;&gt;
    &lt;a href=&#34;#%e7%ac%ac%e4%b8%80%e7%ab%a0%e4%ba%86%e8%a7%a3-gin-%e6%a1%86%e6%9e%b6&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    第一章：了解 Gin 框架
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.1 Gin 框架介绍与特点&lt;/li&gt;
&lt;li&gt;1.2 安装与初始化 Gin&lt;/li&gt;
&lt;li&gt;1.3 路由和中间件基础&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第二章构建自己的-web-框架&#34;&gt;
    &lt;a href=&#34;#%e7%ac%ac%e4%ba%8c%e7%ab%a0%e6%9e%84%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84-web-%e6%a1%86%e6%9e%b6&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    第二章：构建自己的 Web 框架
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2.1 框架设计理念与目标&lt;/li&gt;
&lt;li&gt;2.2 项目目录结构规划&lt;/li&gt;
&lt;li&gt;2.3 配置管理与环境切换&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第三章核心功能实现&#34;&gt;
    &lt;a href=&#34;#%e7%ac%ac%e4%b8%89%e7%ab%a0%e6%a0%b8%e5%bf%83%e5%8a%9f%e8%83%bd%e5%ae%9e%e7%8e%b0&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    第三章：核心功能实现
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;3.1 实现服务启动时可选的配置项（免费预览）&lt;/li&gt;
&lt;li&gt;3.2 实现异常捕获与告警&lt;/li&gt;
&lt;li&gt;3.3 实现错误处理与告警&lt;/li&gt;
&lt;li&gt;3.4 实现链路日志记录（免费预览）&lt;/li&gt;
&lt;li&gt;3.5 包装 gin IRoutes&lt;/li&gt;
&lt;li&gt;3.6 包装 gin Context&lt;/li&gt;
&lt;li&gt;3.7 定义统一错误码与错误信息语言包&lt;/li&gt;
&lt;li&gt;3.8 定义接口返回数据规范&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第四章第三方组件集成&#34;&gt;
    &lt;a href=&#34;#%e7%ac%ac%e5%9b%9b%e7%ab%a0%e7%ac%ac%e4%b8%89%e6%96%b9%e7%bb%84%e4%bb%b6%e9%9b%86%e6%88%90&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    第四章：第三方组件集成
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;4.1 集成 gorm 进行 MySQL 数据库操作，并支持主从数据库配置&lt;/li&gt;
&lt;li&gt;4.2 集成 redis 进行 Redis 数据库操作&lt;/li&gt;
&lt;li&gt;4.3 集成 mongo 进行 MongoDB 数据库操作&lt;/li&gt;
&lt;li&gt;4.4 集成 resty 进行 HTTP 接口调用&lt;/li&gt;
&lt;li&gt;4.5 集成 jwt 实现身份认证及验证中间件&lt;/li&gt;
&lt;li&gt;4.6 集成 swagger 实现自动生成接口文档&lt;/li&gt;
&lt;li&gt;4.7 集成 aes 对称加密算法&lt;/li&gt;
&lt;li&gt;4.8 集成 rsa 非对称加密算法&lt;/li&gt;
&lt;li&gt;4.9 集成 snowflake 实现生成唯一 ID&lt;/li&gt;
&lt;li&gt;4.10 集成 cors 实现允许前端跨域请求&lt;/li&gt;
&lt;li&gt;4.11 集成 prometheus 客户端实现注册和暴露指标&lt;/li&gt;
&lt;li&gt;4.12 集成 pprof 实现应用程序性能分析&lt;/li&gt;
&lt;li&gt;4.13 集成 gin 开发环境下实现代码的热更新部署&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第五章restful-api-设计与实现&#34;&gt;
    &lt;a href=&#34;#%e7%ac%ac%e4%ba%94%e7%ab%a0restful-api-%e8%ae%be%e8%ae%a1%e4%b8%8e%e5%ae%9e%e7%8e%b0&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    第五章：RESTful API 设计与实现
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;5.1 资源映射和路由设计&lt;/li&gt;
&lt;li&gt;5.2 自定义编写中间件及使用&lt;/li&gt;
&lt;li&gt;5.3 请求参数解析与验证&lt;/li&gt;
&lt;li&gt;5.4 基本 CRUD 操作的实现&lt;/li&gt;
&lt;li&gt;5.5 运行使用与编译成二进制文件（免费预览）&lt;/li&gt;
&lt;li&gt;5.6 示例二：集成登录、注册和用户管理功能（免费预览）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第六章加餐&#34;&gt;
    &lt;a href=&#34;#%e7%ac%ac%e5%85%ad%e7%ab%a0%e5%8a%a0%e9%a4%90&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    第六章：加餐
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;6.1 关于 10 个框架设计的实践&lt;/li&gt;
&lt;li&gt;6.2 Go 开发者成长路线&lt;/li&gt;
&lt;li&gt;6.3 MySQL 研发规范&lt;/li&gt;
&lt;li&gt;6.4 Redis 研发规范&lt;/li&gt;
&lt;li&gt;6.5 Git 使用规范&lt;/li&gt;
&lt;li&gt;6.6 RESTful API 规范&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学会后，你将 具备中级 Go 工程师的能力，这将使你有机会获得升职和加薪。&lt;/p&gt;
&lt;p&gt;目前开源项目 &lt;a class=&#34;link&#34; href=&#34;https://github.com/xinliangnote/go-gin-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;go-gin-api&lt;/a&gt; 已经过验证，受到了广泛认可，目前已经获得了超过 5.4K 的 Star。这显示了它在开发者社区中的受欢迎程度和影响力。&lt;/p&gt;
&lt;p&gt;欢迎小伙伴订阅我的专栏，订阅后我会交流群和两套源码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;极简版 CURD 代码，适合直接拿来应用到自己项目中&lt;/li&gt;
&lt;li&gt;带有 登录、注册、用户管理模块，可以进行编码参考&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://xiaobot.net/p/goandai&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;👉 点击查看专栏&lt;/a&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>《Golang 工程师面试题集锦》</title>
        <link>http://localhost:1313/p/golang-interview-questions/</link>
        <pubDate>Sun, 14 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/golang-interview-questions/</guid>
        <description>&lt;h2 id=&#34;一并发与并行&#34;&gt;
    &lt;a href=&#34;#%e4%b8%80%e5%b9%b6%e5%8f%91%e4%b8%8e%e5%b9%b6%e8%a1%8c&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    一、并发与并行
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.1 如何在 Go 中实现并发安全？&lt;/li&gt;
&lt;li&gt;1.2 描述 Go 的并发模型，Goroutine 是如何工作的？&lt;/li&gt;
&lt;li&gt;1.3 解释 Go 中的死锁，并提供如何避免死锁的策略？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二通道的高级用法&#34;&gt;
    &lt;a href=&#34;#%e4%ba%8c%e9%80%9a%e9%81%93%e7%9a%84%e9%ab%98%e7%ba%a7%e7%94%a8%e6%b3%95&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    二、通道的高级用法
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2.1 通道的不同类型（缓冲通道和非缓冲通道）及其用例有哪些？&lt;/li&gt;
&lt;li&gt;2.2 如何优雅地关闭通道并处理相关的并发问题？&lt;/li&gt;
&lt;li&gt;2.3 在并发程序中，通常需要处理 goroutine 执行过程中产生的错误。请说明如何使用通道来收集和处理这些错误。提供一个示例，说明如何从多个并发执行的 goroutine 中收集错误信息。&lt;/li&gt;
&lt;li&gt;2.4 解释为什么只有通道的发送者应该关闭通道，而接收者不应该关闭通道。在一个系统中，如果有多个发送者共享同一个通道，如何安全地关闭该通道？&lt;/li&gt;
&lt;li&gt;2.5 解释 select 语句在通道操作中的用途。如何使用 select 来同时处理多个通道的发送和接收操作？请提供一个示例。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三性能优化&#34;&gt;
    &lt;a href=&#34;#%e4%b8%89%e6%80%a7%e8%83%bd%e4%bc%98%e5%8c%96&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    三、性能优化
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;3.1 Go 中常见的内存泄漏场景有哪些，如何排查和解决？&lt;/li&gt;
&lt;li&gt;3.2解释逃逸分析以及它对性能优化的影响&lt;/li&gt;
&lt;li&gt;3.2描述你如何使用 pprof 进行性能分析？&lt;/li&gt;
&lt;li&gt;3.4 Go 语言的垃圾回收机制如何影响应用程序的性能？你是如何优化垃圾回收的影响，以提高性能的？&lt;/li&gt;
&lt;li&gt;3.5 在微服务架构中，你如何通过 Go 实现服务之间的高效通信？请谈谈你在实现 RPC/HTTP API 时，对性能做了哪些优化？&lt;/li&gt;
&lt;li&gt;3.6 在 Go 中使用并发时，如何选择合适的并发模式（例如，goroutines 和 channels、sync 包中的工具等）来优化程序性能？请提供一个场景，并解释你的选择和实现方法。&lt;/li&gt;
&lt;li&gt;3.7 描述在 Go 程序中，你是如何通过减少内存分配来优化性能的？请举例说明，比如利用 sync.Pool、减少逃逸分析中的堆分配等策略。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四高级数据结构和算法&#34;&gt;
    &lt;a href=&#34;#%e5%9b%9b%e9%ab%98%e7%ba%a7%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84%e5%92%8c%e7%ae%97%e6%b3%95&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    四、高级数据结构和算法
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;4.1 Go 中的排序算法有哪些，如何选择合适的排序算法？&lt;/li&gt;
&lt;li&gt;4.2 在 Go 中实现高效的数据结构（如跳表、布隆过滤器）的策略&lt;/li&gt;
&lt;li&gt;4.3 设计并实现一个并发安全的哈希表。提供 Get(key), Set(key, value), 和 Delete(key) 方法，并确保在多 goroutine 环境下操作的线程安全。&lt;/li&gt;
&lt;li&gt;4.4 实现一个前缀树（Trie），它应该支持 insert, search, 和 startsWith 这三个操作。&lt;/li&gt;
&lt;li&gt;4.5 编写一个函数，输入是一个区间的集合，其中每个区间包括左右端点，这些区间可能会重叠，需要合并并返回一个不重叠的区间列表。输出区间的列表需要按照左端点升序排列。&lt;/li&gt;
&lt;li&gt;4.6 不使用任何库函数，设计并实现一个跳表（Skip List）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;五系统设计与架构&#34;&gt;
    &lt;a href=&#34;#%e4%ba%94%e7%b3%bb%e7%bb%9f%e8%ae%be%e8%ae%a1%e4%b8%8e%e6%9e%b6%e6%9e%84&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    五、系统设计与架构
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;5.1 如何在 Go 中设计和实现微服务架构？&lt;/li&gt;
&lt;li&gt;5.2 描述如何使用 Go 构建高可用、可扩展的后端系统？&lt;/li&gt;
&lt;li&gt;5.3 设计一个分布式缓存系统，要求支持高并发访问和数据一致性保证。请讨论你的设计方案，包括但不限于缓存数据的分片、缓存失效策略、以及如何解决缓存雪崩问题。&lt;/li&gt;
&lt;li&gt;5.4 设计一个分布式ID生成系统，要求生成的ID既要保证全局唯一，又要尽可能地有序。请讨论你的设计方案和实现细节。&lt;/li&gt;
&lt;li&gt;5.5 设计并实现一个简单的消息队列系统，支持基本的发布/订阅模式。请讨论如何保证消息的可靠传递，并处理高并发情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;六测试与错误处理&#34;&gt;
    &lt;a href=&#34;#%e5%85%ad%e6%b5%8b%e8%af%95%e4%b8%8e%e9%94%99%e8%af%af%e5%a4%84%e7%90%86&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    六、测试与错误处理
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;6.1 如何在 Go 中实现单元测试、基准测试和模糊测试？&lt;/li&gt;
&lt;li&gt;6.2 Go 中的错误处理模式有哪些，如何实现自定义错误？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;七包管理与模块&#34;&gt;
    &lt;a href=&#34;#%e4%b8%83%e5%8c%85%e7%ae%a1%e7%90%86%e4%b8%8e%e6%a8%a1%e5%9d%97&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    七、包管理与模块
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;7.1 解释 Go Modules 的工作原理及其对依赖管理的影响&lt;/li&gt;
&lt;li&gt;7.2 如何管理跨多个项目的共享库？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;八反射和接口&#34;&gt;
    &lt;a href=&#34;#%e5%85%ab%e5%8f%8d%e5%b0%84%e5%92%8c%e6%8e%a5%e5%8f%a3&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    八、反射和接口
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;8.1 Go 的反射机制是什么，它的应用场景有哪些？&lt;/li&gt;
&lt;li&gt;8.2 解释空接口（&lt;code&gt;interface{}&lt;/code&gt;）的用途及其与类型断言的关系&lt;/li&gt;
&lt;li&gt;8.3 请给出一个例子，说明如何定义和实现一个接口，以及如何使用该接口来提高代码的可测试性&lt;/li&gt;
&lt;li&gt;8.4 Go 语言的接口嵌套是什么？请举例说明&lt;/li&gt;
&lt;li&gt;8.5 使用反射时应该注意哪些性能问题？&lt;/li&gt;
&lt;li&gt;8.6 如何在不破坏现有接口的情况下，向接口添加新的方法？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;九安全性&#34;&gt;
    &lt;a href=&#34;#%e4%b9%9d%e5%ae%89%e5%85%a8%e6%80%a7&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    九、安全性
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;9.1 Go 中常见的安全漏洞有哪些，如何防范？&lt;/li&gt;
&lt;li&gt;9.2 描述使用 HTTPS 和 JWT 在 Go 应用中实现安全认证的策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;十参考简历&#34;&gt;
    &lt;a href=&#34;#%e5%8d%81%e5%8f%82%e8%80%83%e7%ae%80%e5%8e%86&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    十、参考简历
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;10.1 Golang 初级开发工程师&lt;/li&gt;
&lt;li&gt;10.2 Golang 中级开发工程师&lt;/li&gt;
&lt;li&gt;10.3 Golang 高级开发工程师&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我已经把上述问题的答案更新到我的专栏里了，感兴趣的小伙伴可以订阅来看看。&lt;/p&gt;
&lt;p&gt;计划会陆续更新超过 50 篇文章，内容丰富，不容错过哦！&lt;a class=&#34;link&#34; href=&#34;https://xiaobot.net/p/aigit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;👉 点击查看专栏&lt;/a&gt;。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
